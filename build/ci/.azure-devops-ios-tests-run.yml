parameters:
  vmImage: ''
  xCodeRoot: ''
  XamarinSDKVersion: ''
  JobName: ''
  JobTimeoutInMinutes: ''
  JobDisplayName: ''
  UITEST_SNAPSHOTS_ONLY: ''
  UITEST_SNAPSHOTS_GROUP: ''
  nugetPackages: ''

jobs:
- job: ${{ parameters.JobName }}
  timeoutInMinutes: ${{ parameters.JobTimeoutInMinutes }}
  dependsOn:
  - iOS_Build
  - SamplesApp_UITests_Build
  displayName: ${{ parameters.JobDisplayName }}

  pool:
    vmImage: ${{ parameters.vmImage }}

  variables:
    CI_Build: true
    SourceLinkEnabled: false
    NUGET_PACKAGES: $(Pipeline.Workspace)/.nuget/packages

  steps:
  - checkout: self
    clean: true

  - task: DownloadBuildArtifacts@0
    displayName: 'Download iOS Samples App'
    inputs:
        artifactName: ios-uitest-build
        downloadPath: '$(build.sourcesdirectory)/build'

  - task: DownloadBuildArtifacts@0
    displayName: 'Download iOS SamplesApp UnitTests'
    inputs:
        artifactName: samplesapp-uitest-binaries
        downloadPath: '$(build.sourcesdirectory)/build'

  - task: DownloadBuildArtifacts@0
    condition: gt(variables['System.JobAttempt'], 1)
    continueOnError: true
    displayName: Download previous test runs failed tests
    inputs:
        artifactName: uitests-failure-results
        downloadPath: '$(build.sourcesdirectory)/build'

  - template: templates/dotnet-install.yml
  - template: templates/optimize-roslyn-mono.yml

  - template: templates/nuget-cache.yml
    parameters:
      nugetPackages: $(NUGET_PACKAGES)

  - template: templates/ios-build-select-version.yml
    parameters:
      xCodeRoot: ${{ parameters.xCodeRoot }}
      XamarinSDKVersion: ${{ parameters.XamarinSDKVersion }}

  - bash: |
      rm -f ${HOME}/Library/Preferences/Xamarin/Settings.plist

    # https://github.com/actions/virtual-environments/issues/1932
    displayName: Apply workaround for Azure Devops issue 1932

  - bash: |
      $(build.sourcesdirectory)/build/ios-uitest-run.sh

    displayName: Run iOS Simulator Tests

    env:
      BUILD_SOURCESDIRECTORY: "$(build.sourcesdirectory)"
      BUILD_ARTIFACTSTAGINGDIRECTORY: "$(build.artifactstagingdirectory)"
      UITEST_SNAPSHOTS_ONLY: "${{ parameters.UITEST_SNAPSHOTS_ONLY }}"
      UITEST_SNAPSHOTS_GROUP: "${{ parameters.UITEST_SNAPSHOTS_GROUP }}"
      UITEST_AUTOMATED_GROUP: "${{ parameters.UITEST_AUTOMATED_GROUP }}"
      UNO_UITEST_IOSBUNDLE_PATH: "$(build.sourcesdirectory)/build/ios-uitest-build/SamplesApp.app"

  - task: PublishTestResults@2
    condition: always()
    inputs:
      testRunTitle: 'iOS Test Run ($(Agent.JobName))'
      testResultsFormat: 'NUnit'
      testResultsFiles: '$(build.sourcesdirectory)/build/TestResult-original.xml'
      failTaskOnFailedTests: true

  - task: PublishBuildArtifacts@1
    condition: always()
    inputs:
      PathtoPublish: $(build.artifactstagingdirectory)
      ArtifactName: uitests-results
      ArtifactType: Container

  - task: PublishBuildArtifacts@1
    condition: always()
    inputs:
      PathtoPublish: $(build.sourcesdirectory)/build/uitests-failure-results
      ArtifactName: uitests-failure-results
      ArtifactType: Container

  - task: PublishBuildArtifacts@1
    condition: always()
    inputs:
      PathtoPublish: $(build.sourcesdirectory)/build/uitests-failure-results
      ArtifactName: uitests-failure-results
      ArtifactType: Container

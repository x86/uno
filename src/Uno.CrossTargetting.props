<Project ToolsVersion="15.0">

  <Import Project="PlatformItemGroups.props" />

  <PropertyGroup>
	<Product>$(AssemblyName) ($(TargetFramework))</Product>
	<DefaultLanguage>en-US</DefaultLanguage>

	<!-- Version management is now done through NuGet, this avoids issues related version mismatch -->
	<Version>255.255.255.255</Version>

	<NoWarn>$(NoWarn),1998,4014,VSX1000,NU1701</NoWarn>
	<AutoGenerateBindingRedirects>true</AutoGenerateBindingRedirects>
	<GenerateBindingRedirectsOutputType>true</GenerateBindingRedirectsOutputType>
	<RepositoryUrl>$(BUILD_REPOSITORY_URI)</RepositoryUrl>
	<Copyright>nventive</Copyright>
	<Author>nventive</Author>

	<WarningsAsErrors>all</WarningsAsErrors>

  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)'=='Release'">
	<!-- Add 0105 - WinUI build step tends to introduce duplicate usings where there were none in authored code -->
	<NoWarn>$(NoWarn),1998,0105,4014,VSX1000,NU1701</NoWarn>
  </PropertyGroup>

  <!---->

  <Target Name="SetNoWarn"
				  BeforeTargets="Build"
				  Condition=" '$(TargetFramework)' == 'net461' ">

	<!--
		This target is the equivalent to this property group, until this
		is fixed: https://github.com/NuGet/Home/issues/6662
		<PropertyGroup Condition=" '$(TargetFramework)' == 'net461' ">
			<NoWarn>$(NoWarn);67</NoWarn>
		</PropertyGroup>
		-->

	<CreateProperty Value="$(NoWarn);67">
	  <Output
			  TaskParameter="Value"
			  PropertyName="NoWarn" />
	</CreateProperty>
  </Target>

  <!--
  List of known constants:
  - __SKIA__: Used when building for the Skia backend
  - __WASM__: Used when building for the WebAssembly backend
  - UNO_REFERENCE_API: Used when the netstandard 2.0 Reference API is used.
  - HAS_EXPENSIVE_TRYFINALLY: Used on WebAssembly until exceptions are supported by the WebAssembly specification
  - __NETSTD_REFERENCE__: Used when building the reference assemblies for the netstandard 2.0 target
  - UNO_HAS_UIELEMENT_IMPLICIT_PINNING: Used to mark targets that have specific constraints on
										UIElements. On iOS, this means additional weak references
										backed fields to handle opaque native reference pinning and avoid
										memory leaks.
  - UNO_HAS_ENHANCED_HIT_TEST_PROPERTY: Used to mark if the ENUM hit test property is present or not
  - Constants for Xamarin backends and SDK versions: https://docs.microsoft.com/en-us/xamarin/cross-platform/app-fundamentals/building-cross-platform-applications/platform-divergence-abstraction-divergent-implementation#conditional-compilation
  -->

  <PropertyGroup Condition="$(_IsNetStd)">
	  <DefineConstants>$(DefineConstants);__NETSTD__</DefineConstants>
  </PropertyGroup>

  <PropertyGroup Condition="$(_IsNetStd) and '$(UnoRuntimeIdentifier)'=='WebAssembly'">
	<DefineConstants>$(DefineConstants);__WASM__;UNO_REFERENCE_API;HAS_EXPENSIVE_TRYFINALLY;UNO_HAS_ENHANCED_HIT_TEST_PROPERTY</DefineConstants>
  </PropertyGroup>

  <PropertyGroup Condition="$(_IsNetStd) and '$(UnoRuntimeIdentifier)'=='Skia'">
	<DefineConstants>$(DefineConstants);__SKIA__;UNO_REFERENCE_API;UNO_HAS_ENHANCED_HIT_TEST_PROPERTY</DefineConstants>
  </PropertyGroup>

  <PropertyGroup Condition="$(_IsNetStd) and '$(UnoRuntimeIdentifier)'=='Reference'">
	<DefineConstants>$(DefineConstants);__NETSTD_REFERENCE__;UNO_REFERENCE_API</DefineConstants>
  </PropertyGroup>

  <PropertyGroup Condition="$(IsXamarinIOS)">
	<DefineConstants>$(DefineConstants);IOS1_0;XAMARIN;XAMARIN_IOS;XAMARIN_IOS_UNIFIED;UNO_HAS_UIELEMENT_IMPLICIT_PINNING</DefineConstants>
  </PropertyGroup>

  <PropertyGroup Condition="$(IsXamarinMac)">
	<DefineConstants>$(DefineConstants);UNO_HAS_UIELEMENT_IMPLICIT_PINNING</DefineConstants>
  </PropertyGroup>

  <PropertyGroup Condition="$(IsMonoAndroid)">
	<DefineConstants>$(DefineConstants);XAMARIN;XAMARIN_ANDROID</DefineConstants>
	<AndroidUseIntermediateDesignerFile>True</AndroidUseIntermediateDesignerFile>
	<AndroidResgenFile>obj\$(TargetFramework)\Resources\Resource.Designer.cs</AndroidResgenFile>
	<OutputPath>bin\$(Configuration)\$(TargetFramework)\</OutputPath>
	<IntermediateOutputPath>$(BaseIntermediateOutputPath)$(Configuration)\$(TargetFramework)\</IntermediateOutputPath>
	<AppendTargetFrameworkToOutputPath>false</AppendTargetFrameworkToOutputPath>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(TargetFramework)' != 'uap10.0.17763' ">
	<DefineConstants>$(DefineConstants);HAS_UNO</DefineConstants>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(TargetFramework)' == 'uap10.0.17763' ">
	<TargetPlatformVersion>10.0.17763.0</TargetPlatformVersion>
	<TargetPlatformMinVersion>10.0.17763.0</TargetPlatformMinVersion>
	<DefineConstants>$(DefineConstants);NETFX_CORE</DefineConstants>

	<!-- Ensures the .xr.xml files are generated in a proper layout folder -->
	<GenerateLibraryLayout>true</GenerateLibraryLayout>
  </PropertyGroup>

  <ItemGroup>
	<PackageReference Include="xamarin.build.download" />
  </ItemGroup>

  <ItemGroup Condition=" $(IsMonoAndroid) or $(IsXamarinIOS) ">
	<!-- remove files included by msbuild extras -->
	<Page Remove="@(Page)" />
	<Page Include="**\*.xaml" Exclude="bin\**\*.xaml;obj\**\*.xaml" />
  </ItemGroup>

  <Target Name="GetBuiltProjectOutputRecursive" Condition=" '$(TargetFramework)' == 'xamarinios10' " />

  <Target Name="_DisplayTargets" BeforeTargets="BeforeBuild">
	<Message Text="Building target framework: $(TargetFramework)" Importance="high" Condition="'$(TargetFramework)'!=''" />
  </Target>

  <Target Name="_UnoOverrideNuget"
		AfterTargets="AfterBuild"
		DependsOnTargets="BuiltProjectOutputGroup"
		Condition="'$(UnoNugetOverrideVersion)'!='' and ('$(UnoRuntimeIdentifier)'=='' or '$(UnoRuntimeIdentifier)'=='Reference')">

	<PropertyGroup>
	  <_OverrideTargetFramework>$(TargetFramework)</_OverrideTargetFramework>
      <_baseNugetPath Condition="'$(USERPROFILE)'!=''">$(USERPROFILE)</_baseNugetPath>
      <_baseNugetPath Condition="'$(HOME)'!=''">$(HOME)</_baseNugetPath>
	  <_TargetNugetFolder>$(_baseNugetPath)\.nuget\packages\$(AssemblyName)\$(UnoNugetOverrideVersion)\lib\$(_OverrideTargetFramework)</_TargetNugetFolder>
	  <_TargetNugetRefFolder>$(_baseNugetPath)\.nuget\packages\$(AssemblyName)\$(UnoNugetOverrideVersion)\ref\$(_OverrideTargetFramework)</_TargetNugetRefFolder>
	</PropertyGroup>
	<ItemGroup>
	  <_OutputFiles Include="$(TargetDir)\*.*" />
	  <_OutputRefFiles Include="$(TargetDir)\ref\*.*" />
	</ItemGroup>
	<MakeDir Directories="$(_TargetNugetFolder)" />

    <!-- Add override file to notify a developer that the used package is modified -->
    <WriteLinestoFile File="$(_TargetNugetFolder)\.packageoverride"
             Lines="$([System.DateTime]::Now.ToString('yyyyMMddTHHmmss')) from $(MSBuildThisFileDirectory)"
             Overwrite="True" />
	<Message Importance="high" Text="OVERRIDING NUGET PACKAGE CACHE: $(_TargetNugetFolder) and $(_TargetNugetRefFolder)" />

	<Copy SourceFiles="@(_OutputFiles)"
		  DestinationFiles="@(_OutputFiles->'$(_TargetNugetFolder)\%(RecursiveDir)%(Filename)%(Extension)')" />
	<Copy SourceFiles="@(_OutputRefFiles)"
		  DestinationFiles="@(_OutputRefFiles->'$(_TargetNugetRefFolder)\%(RecursiveDir)%(Filename)%(Extension)')" />
  </Target>


  <Target Name="CommonOverrideNuget" AfterTargets="AfterBuild" DependsOnTargets="BuiltProjectOutputGroup" Condition="'$(UnoNugetOverrideVersion)'!='' and '$(UseCommonOverridePackage)'!=''">
	<PropertyGroup>
	  <_OverrideTargetFramework>$(TargetFramework)</_OverrideTargetFramework>
      <_baseNugetPath Condition="'$(USERPROFILE)'!=''">$(USERPROFILE)</_baseNugetPath>
      <_baseNugetPath Condition="'$(HOME)'!=''">$(HOME)</_baseNugetPath>
	  <CommonOverridePackageId Condition="'$(CommonOverridePackageId)'==''">$(AssemblyName)</CommonOverridePackageId>
	  <_TargetNugetFolder Condition="'$(UnoRuntimeIdentifier)'=='' or '$(UnoRuntimeIdentifier)'=='Reference'">$(_baseNugetPath)\.nuget\packages\$(CommonOverridePackageId)\$(UnoNugetOverrideVersion)\lib\$(_OverrideTargetFramework)</_TargetNugetFolder>
	  <_TargetNugetFolder Condition="'$(UnoRuntimeIdentifier)'!='' and '$(UnoRuntimeIdentifier)'!='Reference'">$(_baseNugetPath)\.nuget\packages\$(CommonOverridePackageId)\$(UnoNugetOverrideVersion)\uno-runtime\$(UnoRuntimeIdentifier.ToLower())</_TargetNugetFolder>
	</PropertyGroup>
	
	<ItemGroup>
	  <_OutputFiles Include="@(TargetPathWithTargetPlatformMoniker)" />
	</ItemGroup>
	
	<MakeDir Directories="$(_TargetNugetFolder)" />

	<Message Importance="high" Text="OVERRIDING NUGET PACKAGE CACHE: $(_TargetNugetFolder)" />

	<Copy SourceFiles="@(_OutputFiles)" DestinationFiles="@(_OutputFiles->'$(_TargetNugetFolder)\%(RecursiveDir)%(Filename)%(Extension)')" />
	<Copy SourceFiles="@(_DebugSymbolsIntermediatePath)" DestinationFiles="@(_DebugSymbolsIntermediatePath->'$(_TargetNugetFolder)\%(RecursiveDir)%(Filename)%(Extension)')" />
  </Target>
</Project>
